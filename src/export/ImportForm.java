package export;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.sql.DriverManager;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import org.fife.ui.rtextarea.*;
import org.fife.ui.rsyntaxtextarea.*;

/**
 *
 * @author holanda
 */
public class ImportForm extends javax.swing.JPanel {

    /**
     * Creates new form ImportForm
     */
    public ImportForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        udfList = new javax.swing.JList<>();
        udfList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        importButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlField = new RSyntaxTextArea(20, 60);
        sqlField.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
        sqlField.setCodeFoldingEnabled(true);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        String[] udfOptStrings = new String[0];
        String sql = "SELECT name FROM functions WHERE language >= 6 AND language <= 11;";

        try {
            String[] aux = new String[100];

            ConnectionGlobal.rs = ConnectionGlobal.st.executeQuery(sql);
            int i;
            for (i = 0; ConnectionGlobal.rs.next(); i++) {
                aux[i] =  ConnectionGlobal.rs.getString(1);
            }
            udfOptStrings = new String[i+1];
            for (int j = 0; j <=i ; j++ ){
                udfOptStrings[j] = aux[j];
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        final String[]  udfOptStrings_aux = udfOptStrings;
        udfList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = udfOptStrings_aux;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(udfList);

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    importButtonActionPerformed(evt);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Dialog",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Dialog",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        sqlField.setColumns(20);
        sqlField.setRows(5);
        if(ConnectionGlobal.SQL == null)
            sqlField.setText("SELECT   \n FROM \n WHERE \n ;");
        else
            sqlField.setText(ConnectionGlobal.SQL);
        jScrollPane2.setViewportView(sqlField);

        jLabel1.setText("SQL Query:");

        jLabel2.setText("UDFs:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(importButton)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(268, 268, 268))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel2)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(importButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>


    // Variables declaration - do not modify
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private RSyntaxTextArea sqlField;
    private javax.swing.JList<String> udfList;
    // End of variables declaration

    private void importPythonData(int ftype, String SQLQuery, String functionName) throws IOException, SQLException {
        String returnType;
        // Table Returning Function
//        if (ftype == 5)
//            returnType = "TABLE(s STRING)";
//        else
        returnType = "STRING";

        String exportParametersFunction  = "CREATE OR REPLACE FUNCTION export_parameters(*)\n" +
                "RETURNS "+returnType+" LANGUAGE PYTHON\n" +
                "{\n" +
                "import inspect\n" +
                "import pickle\n" +
                "frame = inspect.currentframe();\n" +
                "args, _, _, values = inspect.getargvalues(frame);\n" +
                "dd = {x: values[x] for x in args};\n" +
                "del dd['_conn']\n" +
                "return pickle.dumps(dd);\n" +
                "};";

        if (SQLQuery.indexOf(functionName) == -1){
            JOptionPane.showMessageDialog(new JFrame(), "Function not found in query!", "Dialog",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        SQLQuery = SQLQuery.replaceFirst(functionName,"export_parameters");

        PrintWriter writer = new PrintWriter(ConnectionGlobal.path + functionName+ ".bin", "UTF-8");

        ConnectionGlobal.st.executeUpdate(exportParametersFunction);
        ConnectionGlobal.rs = ConnectionGlobal.st.executeQuery(SQLQuery);
        ConnectionGlobal.rs.next();
        writer.println(ConnectionGlobal.rs.getString(1));
        writer.close();
        ConnectionGlobal.st.executeUpdate("DROP FUNCTION export_parameters;");
    }
    private void importPythonFunction(String functionName, String function) throws IOException, SQLException {
        Vector<String> parameterList = new Vector<String>();
        Map<String, String> column_arg_map = new HashMap<String, String>();
        boolean loopBackQuery = false;
        String bottom_function = "";
        String top_function = "";
        String mid_function = "";
        String parametersSQL = "SELECT args.name\n" +
                "FROM args INNER JOIN functions ON args.func_id=functions.id\n" +
                "WHERE functions.name=\'"+functionName+ "\' AND args.inout=1\n" +
                "ORDER BY args.number;";
        ConnectionGlobal.rs = ConnectionGlobal.st.executeQuery(parametersSQL);
        for (int i = 0;  ConnectionGlobal.rs.next(); i++) {
            parameterList.add(ConnectionGlobal.rs.getString(1).replaceAll("\'",""));
        }
        String parameters = "(";
        for (int i = 0; i < parameterList.size(); i ++){
            if(i != parameterList.size()-1)
                parameters+= parameterList.get(i) + ",";
            else
                parameters+=  parameterList.get(i) + "): \n";
        }
        function = function.replaceAll("\t","    ");
        String [] functionList = function.split("\n");
        bottom_function += "\n\n" + "input_parameters = pickle.load(open(\'";
        bottom_function += ConnectionGlobal.path + functionName +".bin\',\'rb\')) \n";
        bottom_function += functionName + '(';
        for (int i = 0; i < parameterList.size(); i ++){
            if (i < parameterList.size() - 1){
                bottom_function+="input_parameters[\'";
                bottom_function += "arg"+Integer.toString(i+1)  + "\'], ";
                column_arg_map.put(parameterList.get(i),"arg"+Integer.toString(i+1));
            }
            else{
                bottom_function += "input_parameters[\'";
                bottom_function += "arg"+Integer.toString(i+1) + "\'])";
                column_arg_map.put(parameterList.get(i),"arg"+Integer.toString(i+1));
            }
        }
//        arglist = "_columns, _column_types, _conn"
//        cleaned_arguments = dict()
//        for i in range(len(input_types)):
//        argname = "arg%d" % (i + 1)
//        if argname not in arguments:
//        raise Exception("Argument %d not found!" % (i + 1))
//        input_name = str(input_types[i][0])
//        cleaned_arguments[] = arguments[argname]
//        arglist += ", %s" % input_name
//        cleaned_arguments['_columns'] = arguments['_columns']
//        cleaned_arguments['_column_types'] = arguments['_column_types']
//        String specialParameters[] = {"_conn","_columns","_columntypes"};

        for (int i = 1; i < functionList.length-1; i ++){
            if(functionList[i].contains("_conn")){
                loopBackQuery = true;
                mid_function+= "    " + functionList[i] + ".fetchall()" + "\n";

            }
            else
                mid_function+= "    " + functionList[i] + "\n";
        }
        if(loopBackQuery)
            top_function ="import pickle \n import pymonetdb \n connection = pymonetdb.connect(username=\""+ConnectionGlobal.user+"\", password=\""+ConnectionGlobal.password+"\",\n" +
                    "hostname=\""+ConnectionGlobal.host+"\", database=\""+ ConnectionGlobal.database+"\") \n _conn = connection.cursor()\n def " + functionName + parameters;
        else
            top_function = "import pickle \n \n \ndef " + functionName + parameters;

        PrintWriter writer = new PrintWriter(ConnectionGlobal.path + functionName+ ".py", "UTF-8");
        writer.println(top_function+mid_function+bottom_function);
        writer.close();

    }

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, IOException {
        String sql = sqlField.getText();
        String functionName = udfList.getSelectedValue();
        ConnectionGlobal.SQL = sql;
        if(functionName == null){
            JOptionPane.showMessageDialog(new JFrame(), "Select a UDF!", "Dialog",
                    JOptionPane.ERROR_MESSAGE);
        }
        else {
            String getFunctionTypeSQL = "SELECT func,type FROM functions WHERE name LIKE \'" + functionName + "\';";
            ConnectionGlobal.rs = ConnectionGlobal.st.executeQuery(getFunctionTypeSQL);
            ConnectionGlobal.rs.next();
            String python_function = ConnectionGlobal.rs.getString(1);
            int functionType = Integer.valueOf(ConnectionGlobal.rs.getString(2));
            importPythonData(functionType, sql, functionName);
            importPythonFunction(functionName, python_function);
            JComponent comp = (JComponent) evt.getSource();
            Window win = SwingUtilities.getWindowAncestor(comp);
            win.dispose();

        }
    }
}
