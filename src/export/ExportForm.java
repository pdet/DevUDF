package export;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

/**
 *
 * @author holanda
 */
public class ExportForm extends javax.swing.JPanel {
    String hard_coded_path = "/Users/holanda/PycharmProjects/UDFDevelopment/";

    public ExportForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        udfList = new javax.swing.JList<>();
        exportButton = new javax.swing.JButton();
        File dir = new File(hard_coded_path);

        File[] aux = dir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String filename) {
                return filename.endsWith(".py");
            }
        });
        String filesList [] = new String[aux.length];
        for (int i = 0; i < aux.length; i ++){
            filesList[i] = aux[i].getName();
        }
        udfList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = filesList;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        udfList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(udfList);

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    exportButtonActionPerformed(evt);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Dialog",
                            JOptionPane.ERROR_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Dialog",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(121, 121, 121)
                                                .addComponent(exportButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exportButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>


    // Variables declaration - do not modify
    private javax.swing.JButton exportButton;
    private javax.swing.JList<String> udfList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration
    private void exportPythonFunction(String functionName, List<String> python_function) throws SQLException {
        Vector<String> inputParameterList = new Vector<String>();
        Vector<String> inputParameterTypeList = new Vector<String>();

        String parametersSQL = "SELECT args.name, args.type\n" +
                "FROM args INNER JOIN functions ON args.func_id=functions.id\n" +
                "WHERE functions.name=\'"+functionName+ "\' AND args.inout=1\n" +
                "ORDER BY args.number;";
        ConnectionGlobal.rs = ConnectionGlobal.st.executeQuery(parametersSQL);
        for (int i = 0;  ConnectionGlobal.rs.next(); i++) {
            inputParameterList.add(ConnectionGlobal.rs.getString(1).replaceAll("\'",""));
            inputParameterTypeList.add(ConnectionGlobal.rs.getString(2).replaceAll("\'",""));

        }
        Vector<String> outputParameterList = new Vector<String>();
        Vector<String> outputParameterTypeList = new Vector<String>();

        parametersSQL = "SELECT args.name, args.type\n" +
                "FROM args INNER JOIN functions ON args.func_id=functions.id\n" +
                "WHERE functions.name=\'"+functionName+ "\' AND args.inout=0\n" +
                "ORDER BY args.number;";
        ConnectionGlobal.rs = ConnectionGlobal.st.executeQuery(parametersSQL);
        for (int i = 0;  ConnectionGlobal.rs.next(); i++) {
            outputParameterList.add(ConnectionGlobal.rs.getString(1).replaceAll("\'",""));
            outputParameterTypeList.add(ConnectionGlobal.rs.getString(2).replaceAll("\'",""));

        }
        String final_UDF = "CREATE OR REPLACE FUNCTION " + functionName + "(";
        for (int i = 0; i < inputParameterList.size(); i ++){
            if (i < inputParameterList.size() - 1)
                final_UDF += inputParameterList.get(i) + " " + inputParameterTypeList.get(i) + ",";
            else
                final_UDF += inputParameterList.get(i) + " " + inputParameterTypeList.get(i) + ") \n";
        }
        if (outputParameterList.size() == 1){
            final_UDF += "RETURNS "+outputParameterTypeList.get(0)+" LANGUAGE PYTHON {";
        }
        else{
            final_UDF += "RETURNS TABLE( "+outputParameterTypeList.get(0)+" LANGUAGE PYTHON {";
            for (int i = 0; i < outputParameterList.size(); i ++){
                if (i < inputParameterList.size() - 1)
                    final_UDF += outputParameterList.get(i) + " " + outputParameterTypeList.get(i) + ",";
                else
                    final_UDF += outputParameterList.get(i) + " " + outputParameterTypeList.get(i) +") \n";
            }
            final_UDF += "LANGUAGE PYTHON {\n";

        }
        boolean udfthis = false;
        for (int i = 0; i < python_function.size(); i ++){
            if (!udfthis && python_function.get(i).contains(functionName))
                udfthis = true;
            if (udfthis){
                final_UDF += python_function.get(i) + "\n";
                if (python_function.get(i).contains("return"))
                    break;
            }
        }
        final_UDF+= "};";
        ConnectionGlobal.st.executeUpdate(final_UDF);

    }
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, IOException {
        String functionName = udfList.getSelectedValue();
        Path path = Paths.get(hard_coded_path+functionName);
        functionName = functionName.replaceFirst(".py","");

        List<String> python_function = Files.readAllLines(path);
        exportPythonFunction(functionName,python_function);
        JComponent comp = (JComponent) evt.getSource();
        Window win = SwingUtilities.getWindowAncestor(comp);
        win.dispose();
    }


}
